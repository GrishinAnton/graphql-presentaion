1. Язык
    Это язык, который используется для взаимодействия с БД. В частности с сервером. А откуда сервер берет данные - это уже не работа GraphQl. Данные могут браться с разных мест и стекаться в GraphQl
2. Среда
    Среда выполнения. Сам graphql принимает запрос. Разбивает его на части. Смотрит, что нужно. Правильно ли сформирован запрос. Потом данные собираются с внешнего источника и отправляются обратно к клиенту.

3. Главная разница с REST

Урлы для REST запросов
/api/posts/ - все посты
/api/posts/1/ - id поста
/api/posts/1/comments - комментарии поста

/api/users/1/posts/1/comments - комментарии одного поста конкретного пользователя

Куча эндпоинтов
query string
/api/posts/1?fields=id,title - id поста и заголовок
{
    "id": 1,
    "title": "Знакомство с GraphQl"
}
/api/posts/1?fields=id,title,author - id поста, заголовок и автор
{
    "id": 1,
    "title": "Знакомство с GraphQl",
    "author": 42
}
/api/autors/43
{
    "id": 42, 
    "firstname": "Antom",
    "lastname": "Grishin"
}
---
{
    "id": 1,
    "title": "Знакомство с GraphQl",
    "author": {
        "id": 42, 
        "firstname": "Antom",
        "lastname": "Grishin"
    }
}
Для получения сделали два запроса. Простая ситуация


Как данный запрос будет выглядеть в GraphQl?
query { - запрос
    posts(id: 1) { - название запроса
        id - какие поля нам нужны
        title
        author {
            firstname
            lastname
        }
    }
}
Плюсы данного запроса. API возвращает все в одном запросе. Все что нужно и не нужно. GraphQl возвращает только то, что запросили. Это одно из преимуществ GraphQl. Это дает возможность формировать в запросе только необходимую информацию, формировать запросы с разных устройств за необходимыми данными. 


Как работает GraphQl?

Схема по протоколу REST - запрос на сервер, данные с БД, возврат данных обратно на клиент. 
Схема по GraphQl - вместо обчного сервера - сервер GraphQl - он получает запрос от клиента, отправляет на сервер и возвращает обратно на клиент. 

POST HTTP
/graphql

GET запрос отправляется в строке 
POST запрос отправляется:
fetch('url', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json' - есть свой тип контента /graphql
    },
    body: JSON.stringify({ - запрос можно отправить в теле запроса
        query:`
            {
                posts(id: 1) {
                    id
                    title
                    author {
                        firstname
                        lastname
                    }
                }
            }
        `
    })
})


Таким образом GraphQl - это посредник между клиентом и сервером. Которые предоставляет единый интерфейс для различных устройств. 


Основные термины
query - запрос
    Мы указываем то, что хотим получить в запросе. Сам запрсо состоит из полей Field - posts, id, title, author
    
Type - типы данных
Перед тем, как отправлять данные на сервер, серверу надо "объяснить" что мы от него хотим. 
Для этого формируются типы данных. Наприме тип данных POST. Состоит из примитивных типов данных и составных. Примитивные типы данных: строка, булеан, составные: объект, массив.

type Post { - свойсва типов данных
    id: ID! - обязательное поле - примитивный тип данных. Специальный тип данных ID
    title: String!
    content: String
    author: Author! - составной тип данных.
    status: Status! - составной тип данных.
    comments: [Comment]! - составной тип данных.
}

type Author {
    id: ID!
    firstname: String!
    lastname: Stirng!
}

Если нам нужны простые типы данных, то не обязательно составлять сложный запрос. Можно составить енумирацию данных enum
enum Status {
    DRAFT
    PUBLISHED
    ARCHIVED
} - строки в сохраняемом объекте

Подробнее, что такое Scalar and enum




mutation - изменения
Изменение данных put, delet, post, puth

mutaton { запрос на изменения
    createPost(inout: { - название изменения - создаем пост. Аргумент input
        title: "Знакомство с GraphQl"
        content: "..."
        status: DRAFT
        authot: {
            firstname: "Anton"
            lastname: "Grishin"
            status: DRAFT
        }
    })
}


Основные типы данных: запрос (query), типы (type), изменения (mutation)


Работа с GraphiQl

query - запрос

query {
    viewer { - если это составное свойство, то обязательно надо указывать поля, которые нужны
        login
        name
        email
    }
}

вложенные свойства
query {
    viewer {
        gists(first: 10) { - агрумент - первые 10 гистов
            totalCount
            nodes {
                id
                name
                description
                isPublic
            }
        }
    }
}

ERRORS
В отличие от REST api в GraphiQl нет кодов ошибок. Вместо этого возвращается сообщение об ошибке. - НАписать об этом больше


query {
    repository(owner: "facebook", name: "graphql") { - название запроса и аргументы
        name
    }
}




alisas - используется, так как в json нельзя, чтобы было два одинаковых названия. 
query {
    graphql: repository(owner: "facebook", name: "graphql") { - имя запроса, которое будет в возвращаемом свойстве объекта
        name
        description
        createdAt
        id
    }

    react: repository(owner: "facebook", name: "react") {
        name
    }
}




fragment - чтобы не копировать одинаковые данные для запроса используется фрагмент

query {
    graphql: repository(owner: "facebook", name: "graphql") {
        ...repoDetails
    }

    react: repository(owner: "facebook", name: "react") {
        ...repoDetails
    }
}

fragment repoDetails on Repository {// repoDetails - название, repository - тип объекта
    name
    description
    createdAt
    id
}


Название запроса
Зачем? 
На сервере будет понятно, в каком запросе произошла ошибка. 
Хорошая практика
Можно указать переменные для запроса
query GetRepos {
    graphql: repository(owner: "facebook", name: "graphql") {
        name
        description
        createdAt
        id
    }

    react: repository(owner: "facebook", name: "react") {
        name
    }
}


Переменные
Данные переменные отправляются вместе с запросом.
query GetRepos($owner: String!, $name: String!) { - переменные. Для определение используется знак $. Потом тип данных для этой переменной
    repository(owner: $owner, name: $name) {
        name
        description
        createdAt
        id
    }
}

query-json
{
    "owner": "facebook",
    "name": "react"
}



Директива
Испольщуется в двух случая. 1. Если указать серверу возвращать значение или нет по условию. 2. Можно пропустить какие-то значения. Например пропустить первые 5. include skip





Мутации




2-я часть
Ставим express
Ставим nodemon
Делаем api 

npm i graphql
npm i express-graphql